global !p
import glob
import pathlib
import subprocess
import urllib.parse
from types import SimpleNamespace


def github_owner_repo(path='', default=''):
    """Figure out the "owner/repo" part of the GitHub URL."""
    wd = os.path.dirname(os.path.abspath(path))
    if not os.path.isdir(wd):
        return default
    with open(os.devnull, 'w') as devnull:
        pipe = subprocess.Popen(["git", "ls-remote", "--get-url"],
                                stdout=subprocess.PIPE,
                                stderr=devnull,
                                cwd=wd)
    remote = pipe.communicate()[0].strip()
    if not isinstance(remote, str):
        remote = remote.decode('UTF-8', 'replace')
    if 'github.com' not in remote:
        return default
    path = remote.split('github.com', 1)[-1].lstrip('/:')
    if path.endswith('.git'):
        path = path[:-4]
    return path


def github_workflow_context(path=''):
    """Figure out if GitHub Actions are being used."""
    wd = os.path.dirname(os.path.abspath(path))
    if not os.path.isdir(wd):
        return None
    owner_repo = github_owner_repo(path)
    if not owner_repo:
        return None
    root = subprocess.run(['git', 'rev-parse', '--show-toplevel'], cwd=wd,
                          stderr=subprocess.DEVNULL,
                          stdout=subprocess.PIPE, text=True).stdout.strip()
    if not root:
        return None
    branch = subprocess.run(
        ['git', 'main-branch'],
        cwd=wd,
        stderr=subprocess.DEVNULL,
        stdout=subprocess.PIPE,
        text=True,
    ).stdout.strip()
    workflow_files = pathlib.Path('.github', 'workflows').glob('*.yml')
    for wf in workflow_files:
        badge_url = f"https://github.com/{owner_repo}/actions/workflows/{wf.name}/badge.svg?branch={branch}"
        badge_link = f"https://github.com/{owner_repo}/actions/workflows/{wf.name}"
        return SimpleNamespace(
            workflow_name=wf.name,
            owner_repo=owner_repo,
            badge_url=badge_url,
            badge_link=badge_link,
        )
    return None
endglobal

snippet travis "Travis CI badge" b
[![Build Status](https://travis-ci.com/${1:owner/repo}.svg?branch=master)](https://travis-ci.com/$1)
endsnippet

context "github_owner_repo(snip.buffer.name)"
snippet travis "Travis CI badge" be
[![Build Status](https://travis-ci.com/`!p snip.rv = context`.svg?branch=master)](https://travis-ci.com/`!p snip.rv = context`)
endsnippet

snippet gha "GitHub Actions badge" b
[![Build Status](https://github.com/${1:owner/repo}/actions/workflows/${2:build.yml}/badge.svg?branch=master)](https://github.com/$1/actions/workflows/$2)
endsnippet

context "github_workflow_context(snip.buffer.name)"
snippet gha "GitHub Actions badge" be
[![Build Status](`!p snip.rv = context.badge_url`)](`!p snip.rv = context.badge_link`)
endsnippet

snippet image "Markdown image syntax"
![](${1:image.png})
endsnippet

context "snip.line"
snippet "([-=~*])+" "underline" bre
`!p snip.rv = match.group(1) * len(snip.buffer[context - 1])`
endsnippet
